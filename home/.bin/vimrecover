#!/usr/bin/env ruby

require 'delegate'
require 'optparse'
require 'fileutils'
require 'singleton'

# a list of files which is always filtered
# by limiters passed to CLI
class FileSet < SimpleDelegator
  # @files can be string or array
  def initialize(files)
    files = files.each_line.map(&:chomp) if files.is_a? String
    super with_limits(files)
  end

  def map(*args, &block)
    # return instance of FileSet
    self.class.new super(*args, &block)
  end

  def to_args
    join(' ')
  end

  private

  def with_limits(files)
    #CLI.instance.limits
    return files
    #return files if @limits.empty?
    # the glob should operate on source files, but we first recover swapfiles
    # should create a map { swap => source } to filter appropriately
    #res = files & @limits.reduce([]) {|acc, glob|
    #   acc + Dir[glob]
    #}
  end
end

class CLI
  include Singleton

  attr_reader :action

  def self.confirm(msg)
    print '%s [Y/n] ' % msg
    !!(gets.strip =~ /^y/i)
  end

  def initialize
    @parser = OptionParser.new do |opts|
      opts.banner = <<-BANNER # <<~ is only 2.3+, so we just left align
Recover vim swapfiles after a session terminates unexpectedly

globs will be logically or'd to limit results

Usage: vimrecover [options] [globs]
      BANNER

      opts.on '-h', '--help', 'Show help' do
        puts opts
        exit
      end

      opts.on '-d', '--[no-]destroy', TrueClass, 'Destroy swapfiles' do |opt|
        @action = :destroy if opt
      end

      opts.on '-o', '--open', 'Open session' do
        @action = :open
      end

      opts.on '-g', '--git', 'Open git diff' do
        @action = :git
      end

      opts.on '-r', '--[no-]recover', TrueClass, 'Automatically recover swapfiles' do |opt|
        @action = :recover if opt
      end

      opts.on '-s', '--status', 'Display swapfiles and commands' do
        @action = :status
      end
    end
    @parser.parse!
  end

  def show_help
    @parser.parse %w[--help]
  end

  def limits
    ARGV
  end
end

class RecoveredSession
  include FileUtils

  def gitfiles
    # deliberately only take first generation i.e. swp
    @gitfiles ||= FileSet.new `git ls-files --modified`
  end

  def swapfiles
    # deliberately only take first generation i.e. swp
    @swapfiles ||= FileSet.new Dir.glob('**/.*.swp', File::FNM_DOTMATCH)
  end

  def sourcefiles
    swapfiles
      .map { |swp|
        basename = File.basename(swp)
          .gsub(/^\./,'')
          .gsub(/\.swp$/, '')
        File.join(File.dirname(swp), basename)
      }
  end

  def destroy!
    rm swapfiles
  end

  def recover!
    # TODO prompt to stage files in git
    exec "vim -r #{sourcefiles.to_args}"
  end

  def open(fileset = :swapfiles)
    case fileset
    when :swapfiles
      exec "vim -O #{sourcefiles.to_args}"
    when :git_diff
      exec "vim -O #{gitfiles.to_args}"
    else raise ArgumentError, "#{fileset} is not a valid option"
    end
  end

  def print_swapfiles
    puts '# Swap files'
    puts swapfiles.join("\n")
    puts ''
  end

  def print_sourcefiles
    puts '# Source files'
    puts sourcefiles.join("\n")
    puts ''
  end

  def print_status
    if swapfiles.any?
      print_swapfiles
      print_sourcefiles
      puts '# Commands'
      puts "## Open previous session"
      puts "vim -O #{sourcefiles.to_args}"
      puts ''
      puts "## Remove swapfiles"
      puts "rm #{swapfiles.to_args}"
    else
      puts 'No swapfiles found'
    end
  end
end

cli = CLI.instance
session = RecoveredSession.new

case cli.action
when :destroy
  session.print_swapfiles
  session.destroy! if CLI.confirm 'Are you sure you want to delete the swap files?'
when :open
  session.open
when :git
  session.open(:git_diff)
when :recover
  session.print_swapfiles
  session.print_sourcefiles
  session.recover! if CLI.confirm 'Autorecovering might clobber existing changes, are you sure?'
when :status
  session.print_status
else cli.show_help
end
